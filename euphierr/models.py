"""
MIT License

Copyright (c) 2023-present noaione

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from dataclasses import dataclass, field
from datetime import date, datetime
from pathlib import Path
from re import Pattern
from typing import List, Optional, Union

__all__ = (
    "ClienteleConfig",
    "SeriesSeason",
    "ArcNCielConfig",
    "ArcNCielDataContent",
    "ArcNCielData",
    "ArcNCielTorrent",
)


@dataclass
class ClienteleConfig:
    type: str
    """The type of the client, currently only support qBittorrent"""
    host: str
    """The Web API Host"""
    _raw_input: str = field(repr=False)
    port: Optional[int] = field(default=8080)
    """The Web API Port, default to 8080"""
    username: Optional[str] = field(default=None)
    """The Web API username"""
    password: Optional[str] = field(default=None)
    """The Web API password"""
    category: Optional[str] = field(default=None)
    """Set the category for the torrent, leave empty or missing to disable"""


@dataclass
class SeriesSeason:
    id: str
    """
    Identifier for the series, you can use random thing here.
    Spaces and special characters will be nuked/replaced.

    DO NOT CHANGE THIS VALUE AFTER THE FIRST RUN.
    """
    rss: str
    """The RSS url, support the *.nyaa.si web only"""
    """
    The final filename (without extension) that will be used in the Jellyfin library folders.
    Default to: Episode S{season}E{episode}
    """
    episode_regex: Pattern[str]
    """The regex to match the episode number and season number (if available) from the torrent name"""
    target_dir: Path
    """The directory where the series will be put, refer to README for more info."""
    target_name: str = field(default="Episode S{season:02d}E{episode:02d}")
    season: int = field(default=1)
    """Fallback season number if not found in the torrent name, if none we will assume ``1``"""
    matches: List[str] = field(default_factory=list)
    """Extra case-insensitive matches for the torrent name before adding"""
    ignore_matches: List[str] = field(default_factory=list)
    """Extra case-insensitive ignores for the torrent name before adding"""
    airtime: Optional[Union[datetime, date]] = field(default=None)
    """When the series will be aired, if not set we will assume ``now``"""
    grace_period: int = field(default=120)
    """The minutes before/after the airtime to download the torrent"""

    def match(self, title: str) -> bool:
        res = self.episode_regex.match(title)
        if res is None:
            return False
        for match in self.matches:
            if match.lower() not in title.lower():
                return False
        return True


@dataclass
class ArcNCielConfig:
    """
    Configuration file for EuphieRR.
    """

    client: ClienteleConfig
    """qBittorrent configuration"""
    series: List[SeriesSeason]
    """Series downloader configuration"""


@dataclass
class ArcNCielDataContent:
    episode: int
    """Episode number"""
    season: int
    """Season number"""
    path: str
    """Full path to the torrent file"""


@dataclass
class ArcNCielData:
    """
    Automatically generated by EuphieRR, do not edit this file.

    Contains downloaded torrent data.
    """

    id: str
    contents: List[ArcNCielDataContent]


@dataclass
class ArcNCielTorrent:
    name: str
    url: str
    hash: Optional[str]
    series: SeriesSeason
    episode: int
    season: Optional[int] = field(default=None)

    def to_data_content(self, extension: str):
        if extension.startswith("."):
            extension = extension[1:]
        filename_fmt = self.series.target_name.format(
            season=self.actual_season,
            episode=self.episode,
        )
        filepath = Path(self.series.target_dir) / f"Season {self.actual_season:02d}" / f"{filename_fmt}.{extension}"
        return ArcNCielDataContent(
            episode=self.episode,
            season=self.actual_season,
            path=str(filepath),
        )

    @property
    def actual_season(self):
        return self.season or self.series.season
